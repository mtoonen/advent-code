package nl.meine.adventofcode._2021;

import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

class Day13Test {

    Day13 instance;
    List<String> input;

    @BeforeEach
    void setUp() throws IOException {
        instance = new Day13();
        InputStream is = Day8.class.getClassLoader().getResourceAsStream("inputday13.txt");
        input = IOUtils.readLines(is, StandardCharsets.UTF_8);

    }

    @Test
    void one() {
        String instruction = "fold along y=7";
        assertEquals(17, instance.one(input, instruction));
    }


    @Test
    void two() {
        assertEquals(195, instance.two(input));
    }

    @Test
    void testOne() {
    }

    @Test
    void fillGrid() {

        String[][] exp = new String[][]{{".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."},
                {".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."},
                {".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"},
                {"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {"#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."}};
        List<Pos> ps = instance.parsePositions(input);
        String[][] real = instance.fillGrid(ps);
        assertArrayEquals(exp, real);
    }

    @Test
    void foldUp() {
        String[][] input = new String[][]{{".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."},
                {".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."},
                {".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"},
                {"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {"#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."}};
        String[][] expected = new String[][]{
                {"#", ".", "#", "#", ".", ".", "#", ".", ".", "#", "."},
                {"#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"},
                {"#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", "#", ".", "#", ".", ".", "#", ".", "#", "#", "#"},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
        };
        String[][] output = instance.foldUp(7, input);
        assertArrayEquals(expected, output);
    }


    @Test
    void foldLeft() {

        String[][] input = new String[][]{
                {"#", ".", "#", "#", ".", ".", "#", ".", ".", "#", "."},
                {"#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"},
                {"#", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", "#", ".", "#", ".", ".", "#", ".", "#", "#", "#"},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
        };
        String[][] expected = new String[][]{
                {"#","#","#","#","#"},
                {"#",".",".",".","#"},
                {"#",".",".",".","#"},
                {"#",".",".",".","#"},
                {"#","#","#","#","#"},
                {".",".",".",".","."},
                {".",".",".",".","."},
        };
        String[][] output = instance.foldLeft(5, input);
        assertArrayEquals(expected, output);
    }

    @Test
    void mergeLeft() {
    }

    @Test
    void mergeUp() {
    }

    @Test
    void parsePositions() {
    }

    @Test
    void testTwo() {
    }

    @Test
    void main() {
    }

    @Test
    void parseInstruction() {
        String s = "fold along y=7";
        Pos p = instance.parseInstruction(s);
        assertEquals(7, p.row);
        assertEquals(0, p.col);
        s = "fold along x=127";
        p = instance.parseInstruction(s);
        assertEquals(0, p.row);
        assertEquals(127, p.col);
    }

    @Test
    void countDots() {
        String[][] expected = new String[][]{
                {"#", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", "#", ".", ".", "#", ".", ".", "#", "."},
                {".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", "#", ".", ".", ".", ".", "#", ".", "#"},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
                {".", "#", ".", ".", ".", ".", "#", ".", "#", "#", "."},
                {".", ".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
                {".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#"},
                {"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}
        };
        long num = instance.countDots(expected);
        assertEquals(18, num);
    }
}
